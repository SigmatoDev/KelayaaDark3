"use client";

import { useEffect, useState } from "react";
import { Heading } from "@/components/ui/heading";
import { Separator } from "@/components/ui/separator";
import { Card, CardContent } from "@/components/ui/card";
import Image from "next/image";
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { Search, ShoppingCart } from "lucide-react";
import { useRouter } from "next/navigation";

interface Order {
  paymentStatus: string;
  _id: string;
  orderNumber: string;
  createdAt: string;
  items: Array<{
    materialType: string;
    pricePerLine: number;
    product: string;
    name: string;
    slug: string;
    qty: number;
    image: string;
    price: number;
  }>;
  totalPrice: number;
  isPaid: boolean;
  isDelivered: boolean;
  paidAt?: string;
  deliveredAt?: string;
  status: string;
}

export default function OrderHistory() {
  const router = useRouter();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const ITEMS_PER_PAGE = 4;

  const filteredOrders = orders.filter(
    (order) =>
      order.orderNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
      order.items.some((item) =>
        item.name.toLowerCase().includes(searchQuery.toLowerCase())
      )
  );

  const totalPages = Math.ceil(filteredOrders.length / ITEMS_PER_PAGE);

  const paginatedOrders = filteredOrders.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await fetch("/api/orders/mine");
        if (!response.ok) throw new Error("Failed to fetch orders");

        const data = await response.json();
        console.log("Fetched orders:", data);

        const sortedOrders = data.sort(
          (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
        );
        setOrders(sortedOrders);
      } catch (error) {
        console.error("Error fetching orders:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, []);

  useEffect(() => {
    setCurrentPage(1);
  }, [searchQuery]);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        Loading...
      </div>
    );
  }

  const getOrderStatusUI = (status: string, date: string) => {
    console.log("status,,,,", status);
    const formattedDate = new Date(date).toLocaleDateString("en-IN", {
      day: "2-digit",
      month: "short",
      year: "numeric",
    });

    switch (status) {
      case "completed":
        return {
          icon: (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5 text-green-600"
              viewBox="0 0 24 24"
              fill="currentColor"
            >
              <circle cx="12" cy="12" r="10" fill="#00b852" />
              <path
                d="M16 9l-5.5 5.5L8 12"
                stroke="#fff"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          ),
          label: "Delivered",
          color: "text-green-600",
          dateLabel: `on ${formattedDate}`,
        };

      case "processing":
        return {
          icon: (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5 text-yellow-500"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <circle cx="12" cy="12" r="10" />
              <polyline points="12 6 12 12 16 14" />
            </svg>
          ),
          label: "Processing",
          color: "text-yellow-600",
          dateLabel: `placed on ${formattedDate}`,
        };

      case "shipped":
        return {
          icon: (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5 text-blue-600"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth="2"
            >
              <path d="M3 10h18l-2 8H5l-2-8z" />
              <circle cx="7.5" cy="18.5" r="1.5" />
              <circle cx="16.5" cy="18.5" r="1.5" />
            </svg>
          ),
          label: "Shipped",
          color: "text-blue-600",
          dateLabel: `on ${formattedDate}`,
        };

      case "out-for-delivery":
        return {
          icon: (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5 text-indigo-600"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth="2"
            >
              <path d="M9 17V5h13l-1 6h-5v6" />
              <circle cx="7.5" cy="17.5" r="1.5" />
              <circle cx="18.5" cy="17.5" r="1.5" />
            </svg>
          ),
          label: "Out for Delivery",
          color: "text-indigo-600",
          dateLabel: `as of ${formattedDate}`,
        };

      case "cancelled":
        return {
          icon: (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5 text-gray-500"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <circle cx="12" cy="12" r="10" />
              <line x1="15" y1="9" x2="9" y2="15" />
              <line x1="9" y1="9" x2="15" y2="15" />
            </svg>
          ),
          label: "Cancelled",
          color: "text-gray-600",
          dateLabel: `on ${formattedDate} as per your request`,
        };

      case "failed":
      default:
        return {
          icon: (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5 text-red-600"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth="2"
            >
              <circle cx="12" cy="12" r="10" />
              <line x1="12" y1="8" x2="12" y2="12" />
              <circle cx="12" cy="16" r="1" />
            </svg>
          ),
          label: "Payment Failed",
          color: "text-red-600",
          dateLabel: `on ${formattedDate}`,
        };
    }
  };

  return (
    <div className="container max-w-4xl mx-auto py-8 px-4">
      <Heading title="Order History" description="View and track your orders" />
      <Separator className="my-6" />

      <div className="my-4 flex flex-col sm:flex-row items-center gap-2 w-full sm:max-w-md">
        <div className="relative w-full">
          <Input
            type="text"
            placeholder="Search by Order Number or Product Name"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pr-10"
          />
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
        </div>
      </div>

      {filteredOrders.length === 0 ? (
        <div className="text-center py-10">
          <h3 className="text-lg font-medium">No orders found</h3>
          <p className="text-gray-500 mt-2">
            Start shopping to see your orders here!
          </p>
          <Link
            href="/search"
            className="inline-block mt-4 px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
          >
            Browse Products
          </Link>
        </div>
      ) : (
        <>
          <div className="space-y-4">
            {paginatedOrders.map((order) => {
              console.log("paginatedOrders", paginatedOrders);
              const statusInfo = getOrderStatusUI(
                order.status,
                order.createdAt
              );
              return (
                <div
                  key={order._id}
                  className="border rounded-lg bg-white shadow-sm p-4 space-y-3"
                >
                  {/* Status and Date Row */}
                  <div className="flex items-center gap-2 text-sm font-medium">
                    {statusInfo.icon}
                    <span className={statusInfo.color}>{statusInfo.label}</span>
                    <span className="text-gray-500 font-normal ml-2">
                      {statusInfo.dateLabel}
                    </span>
                  </div>

                  {/* Card Body */}
                  <Link href={`/my-orders/${order._id}`}>
                    <div className="bg-[#f9f9f9] p-4 rounded-md hover:bg-[#f1f1f1] transition">
                      <div className="flex flex-col gap-4">
                        {order.items.map((item, i) => {
                          const isCancelled = order.status === "cancelled";

                          return (
                            <div
                              key={i}
                              className={`flex flex-col md:flex-row justify-between items-start gap-4 w-full p-4 rounded-md transition ${
                                isCancelled
                                  ? "bg-[#f9f9f9]"
                                  : "bg-[#f9f9f9] hover:bg-[#f1f1f1]"
                              }`}
                            >
                              {/* Left: Product info */}
                              <div className="flex gap-4 flex-1">
                                <Image
                                  src={item.image || "/placeholder.png"}
                                  alt={item.name}
                                  width={70}
                                  height={90}
                                  className="rounded-md object-cover"
                                />
                                <div className="space-y-1 text-sm">
                                  <p
                                    className={`font-semibold ${
                                      isCancelled
                                        ? "text-red-700"
                                        : "text-[#333]"
                                    }`}
                                  >
                                    {item.name}
                                  </p>
                                  <p className="text-gray-600">Size: M</p>

                                  {/* {!isCancelled && (
                                    <p className="text-xs text-gray-500 mt-2 flex items-center gap-2">
                                      <span className="w-2 h-2 rounded-full bg-gray-400 inline-block" />
                                      Exchange/Return window closed on{" "}
                                      {new Date(
                                        new Date(order.createdAt).getTime() +
                                          7 * 86400000
                                      ).toLocaleDateString("en-IN", {
                                        day: "2-digit",
                                        month: "short",
                                        year: "numeric",
                                      })}
                                    </p>
                                  )} */}
                                </div>
                              </div>

                              {/* Right: Action button or cancellation note */}
                              <div className="w-full md:w-auto flex justify-start md:justify-end">
                                {!isCancelled ? (
                                  <button
                                    className="group flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium rounded-md border border-[#ff3f6c] text-[#ff3f6c] bg-white hover:bg-[#ffeff3] transition w-full md:w-auto"
                                    onClick={(e) => {
                                      e.preventDefault();
                                      router.push(
                                        `/product/${item?.product?.productCode}`
                                      );
                                    }}
                                  >
                                    <ShoppingCart className="w-4 h-4 group-hover:scale-105 transition-transform" />
                                    <span>Reorder</span>
                                  </button>
                                ) : (
                                  <span className="text-xs text-red-600 font-semibold">
                                    ❌ Order Cancelled
                                  </span>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </Link>
                </div>
              );
            })}
          </div>

          {/* Pagination Controls */}
          <div className="flex justify-center items-center gap-4 mt-6">
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="px-4 py-1 text-sm border rounded disabled:opacity-50"
            >
              Previous
            </button>
            <span className="text-sm text-gray-600">
              Page {currentPage} of {totalPages}
            </span>
            <button
              onClick={() =>
                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
              }
              disabled={currentPage === totalPages}
              className="px-4 py-1 text-sm border rounded disabled:opacity-50"
            >
              Next
            </button>
          </div>
        </>
      )}
    </div>
  );
}
